# standard library for "make here" build scripts
#
# Normal usage pattern from a mkhere/xxx.sh
#
#	TARGET=xxx
#	. $(dirname "$0")/lib/stdlib


# Set debugging macros
if [ -n "$DEBUG" ]
then
	debug () { echo >&2 "$@"; }
else
	debug () { echo -n ''; }
fi

# Find the name of an alternative to everything in root
# Usage: ln -s /var/cache/mkhere-altcache lib/altcache
ALTCACHE="$(readlink $(dirname "$0")"/lib/altcache" || echo '')"
debug "Loaded ALTCACHE=\"$ALTCACHE\" from $(dirname "$0")/lib/altcache"

# Derive $TARGET and ensure its rootfs
TARGET=$(basename "$0")
TARGET=${TARGET%.sh}
VERSION_TARGET="VERSION_${TARGET}"
VARIANT_TARGET="VARIANT_${TARGET}"
FLAVOUR_TARGET="FLAVOUR_${TARGET}"
if [ "$0" != "$ALTCACHE/mkhere/$TARGET.sh" ]
then
	# Find the new root directory and test it
	if [ -z "$ALTCACHE" ]
	then
		NEWROOT="$(dirname "$0")/.."
	else
		TRAILER="${ALTCACHE}/mkhere/${TARGET}.sh"
		PREFIXLEN=$[${#0}-${#TRAILER}]
		NEWROOT="${0:0:$PREFIXLEN}"
		debug "Comparing \"${0:$PREFIXLEN}\" to \"${TRAILER}\""
		if [ ! "${0:$PREFIXLEN}" = "${TRAILER}" ]
		then
			echo >&2 "Path \"$0\" does not have expected trailer \"${TRAILER}\""
			exit 1
		fi
	fi
	debug Changing to build rootfs \"$NEWROOT\"
	if [ ! -x "$NEWROOT/$ALTCACHE/mkhere/$TARGET.sh" ]
	then
		echo >&2 "Error: No \"$ALTCACHE/mkhere/$TARGET.sh\" script under \"$NEWROOT\""
		exit 1
	fi
	# Following are useless, without export they don't seem to get here
	export $VERSION_TARGET
	export $VARIANT_TARGET
	export $FLAVOUR_TARGET
	# Consider alternatives for the chroot command
	if [ -x "$ALTCACHE/mkhere/lib/altchroot" ]
	then
		CHROOT="$ALTCACHE/mkhere/lib/altchroot"
	else
		CHROOT='chroot'
	fi
	# Support for last command being "install"
	if [ "${!#}" = "install" ]
	then
		set -- "${@:1:$(($#-1))}"   # Drop last word from $@
		# Install after after running the command to form cpio archive
		"$CHROOT" "$NEWROOT" "$ALTCACHE/mkhere/$TARGET.sh" "$@" | \
			cpio -i \
				--no-absolute-filenames \
				--make-directories \
				--unconditional \
				--quiet --verbose
		exit $?
	else
		# No install -- just run the command
		exec "$CHROOT" "$NEWROOT" "$ALTCACHE/mkhere/$TARGET.sh" "$@"
	fi
fi

# Derive variables $VERSION, $VARIANT and $FLAVOUR
VERSION=${!VERSION_TARGET}
VARIANT=${!VARIANT_TARGET}
FLAVOUR=${!FLAVOUR_TARGET}
debug Script target is $TARGET, version is $VERSION, variant is $VARIANT, flavour is $FLAVOUR

# Prepend an "alternative binary dir" to the $PATH
if [ -r "${ALTCACHE}/mkhere/lib/altbin" ]
then
	ALTBIN=$(readlink -f "${ALTCACHE}/mkhere/lib/altbin" || echo '')
	PATH="$ALTBIN:$PATH"
fi

# Strip the TRAILER last line for cpio archives
strip_cpio_trailer () {
	sed '$s/07070100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000B00000000TRAILER!!!\(\x00\)*$//'
}

# Send the TRAILER last file for cpio archives
# Provide "plain", "gzip" or "none" for the mode
write_cpio_trailer () {
	debug "Sending \"$1\" cpio trailer"
	case "$1" in
	plain)
		cpio -o -H newc --quiet < /dev/null
		;;
	gzip)
		cpio -o -H newc --quiet < /dev/null | gzip
		;;
	none)
		;;
	esac
}

# Derive DIR_SRC, DIR_GIT, DIR_BUILD, DIR_TREE and have them
derive_DIR () {
	DIR_FETCH="${ALTCACHE}/dl/${TARGET}-${VERSION}"
	DIR_SRC="${ALTCACHE}/src/${TARGET}-${VERSION}"
	DIR_GIT="${DIR_SRC}/${TARGET}-${VERSION}.git"
	DIR_BUILD="${ALTCACHE}/build/${TARGET}-${VERSION}${VARIANT:+-${VARIANT}}"
	DIR_TREE="${ALTCACHE}/tree/${TARGET}-${VERSION}${VARIANT:+-${VARIANT}}"
	mkdir -p "${DIR_TREE}" "${DIR_BUILD}" "${DIR_SRC}" "${DIR_FETCH}"
}

# Setup a default VERSION, VARIANT, TARGET; called from /mkhere/$TARGET.sh
default_VERSION() {
	VERSION=${VERSION:-$1}
}
default_VARIANT() {
	VARIANT=${VARIANT:-$1}
}
default_FLAVOUR() {
	FLAVOUR=${FLAVOUR:-$1}
}

# Utility to erase a directory somewhat safely
empty_dir () {
	EMPTY_DIR=${1:-$PWD}
	case "$EMPTY_DIR" in
	"$DIR_TREE"|"$DIR_SRC"|"$DIR_BUILD"|"$DIR_TREE"|"$DIR_FETCH")
		rm -rf "$EMPTY_DIR/"*
		;;
	"$DIR_TREE"/*|"$DIR_SRC"/*|"$DIR_BUILD"/*|"$DIR_TREE"/*|"$DIR_FETCH"/*)
		rm -rf "$EMPTY_DIR"
		;;
	*)
		echo >&2 "Protecting you from: empty_dir \"$EMPTY_DIR\""
		exit 1
		;;
	esac
}

# Utility to print lines only when they are new (without sort)
unique () {
	# awk '{if(!seen[$0]++)print}'
	declare -A seen
	while read X
	do
		if [ -z ${seen["$X"]} ]
		then
			echo "$X"
			seen["$X"]=1
		fi
	done
	unset seen
}

# Generic subcommand for installing dependencies
do_osdepend () {
	. $(dirname "$0")/lib/pkglib
	pkg_install $(do_osdependencies)
}

# Check dependencies on other source packages
do_depend () {
	for DEP in $(do_dependencies)
	do
		${ALTCACHE}/mkhere/$DEP.sh check
		EXITCODE=$?
		[ $EXITCODE -ne 0 ] && exit $EXITCODE
	done
	return 0
}

# Generic do_tar, based on do_list
do_tar () {
	( cd "$DIR_TREE" ; tar -cf - $(do_list) )
}

# Generic do_tgz, based on do_tar, do_list
do_tgz () {
	do_tar | gzip --best
}

# Generic do_cpio, based on do_list
do_cpio () {
	do_list | ( cd "$DIR_TREE" ; cpio -o -H newc --quiet ) | strip_cpio_trailer
	CPIO_APPEND_TRAILER=plain
}

# Generic do_cpiogz, based on do_cpio, do_list
do_cpiogz () {
	do_cpio | gzip --best
	CPIO_APPEND_TRAILER=gzip
}

# If not yet downloaded, fetch a first source code update
do_have () {
	for DEP in $(do_dependencies)
	do
		${ALTCACHE}/mkhere/$DEP.sh have
		EXITCODE=$?
		[ $EXITCODE -ne 0 ] && exit $EXITCODE
	done
	if [ $(ls -1 "$DIR_SRC" | wc -l) -eq 0 ]
	then
		do_update
	fi
}

# Helper: Turn a list into a set by removing repeated entries (leave the first)
_mkset () {
	RETVAL=()
	for ELEM in "$@"
	do
		NEW=1
		for KNOWN in ${RETVAL[@]}
		do
			if [ "$ELEM" == "$KNOWN" ]
			then
				NEW=0
			fi
		done
		if [ $NEW -eq 1 ]
		then
			RETVAL+=( $ELEM )
		fi
	done
	echo ${RETVAL[@]}
}

# Find OS libraries from the build system that are needed for a package
do2_oslibs () {
	LIBDIRS=$(
		cat 2>/dev/null /etc/ld.so.conf /etc/ld.so.conf.d/* | \
		sed -e 's/#.*$//' -e '/^[ \t]*$/d' -e '/^include[ \t].*/d'
	)
	# First, list all software (of the requested flavour)
	SWARE=( $( do_list ) )
	# Second, find linked libraries (dropping system-specific ones)
	REFLIBS=( $( _mkset $(
		for FILE in ${SWARE[@]}
		do
			if [ -f "$DIR_TREE/$FILE" -a -x "$DIR_TREE/$FILE" ]
			then
				REFDIR=$( dirname "$FILE" | sed 's+/+\\/+g' )
				ldd 2>/dev/null "$DIR_TREE/$FILE" | \
					sed \
						-e 's/^[ \t]*//' \
						-e 's/ .*//' \
						-e '/^linux-vdso\.so.*/d' \
						-e 's/^\([^/]*\)$/'"$REFDIR"'\/\1/' | \
					unique
			fi
		done
	) ) )
	# Third, mention external, and recurse on internal + external
	EXTREFS=()
	NEWREFS=()
	ADDREFS=( ${REFLIBS[@]} )
	REFLIBS=()
	while [ ${#ADDREFS[@]} -ne 0 ]
	do
		REFLIBS=( ${NEWREFS[@]} )
		NEWREFS=()
		for LIBNAME in ${ADDREFS[@]}
		do
			# If $LIBNAME is an existing full path, use it
			# This is used for /lib/ld-linux.so.2 and similar
			if [ "${LIBNAME:0:1}" = "/" ]
			then
				if [ -r "$LIBNAME" ]
				then
					debug "Full path removed from \"$LIBNAME\""
					EXTREFS+=( "$LIBNAME" )
					NEWREFS+=( $(basename "$LIBNAME") )
					continue
				fi
			fi
			for LIBFILE in $( find 2>/dev/null "$DIR_TREE" $LIBDIRS -follow -type f -name "$LIBNAME" )
			do
				debug "Looking into $LIBNAME => $LIBFILE"
				case "$LIBFILE" in
				# References to our own package are installed,
				# but they may lead to further references in
				# the base system.  For this reason, do not
				# mention but traverse them recursively.
				${DIR_TREE}/*)
					debug Internal $LIBFILE
					NEWREFS+=( "$LIBNAME" )
					;;
				# References to other packages may be dropped.
				# It is understood that dependent libraries
				# will be installed by the caller anyway.
				# This is hoping that flavours will be okay.
				${ALTCACHE}/tree/*)
					debug Peer $LIBFILE
					;;
				# References to the base system are mentioned.
				# In addition, they may hold references to
				# other libraries in the base system.  For this
				# reason, traverse them recursively.
				*)
					debug External $LIBFILE
					EXTREFS+=( "$LIBFILE" )
					NEWREFS+=( "$LIBNAME" )
					;;
				esac
			done
		done
		# Let ADDREFS be those NEWREFS not yet in REFLIBS
		NEWREFS=( $( _mkset ${REFLIBS[@]} ${NEWREFS[@]} ) )
		ADDREFS=( ${NEWREFS[@]:${#REFLIBS[@]}} )
	done
	EXTREFS=( $( _mkset ${EXTREFS[@]} ) )
	# Fourth, resolve symbolic links by adding the referenced files
	ALLFILES=()
	for FILE in ${EXTREFS[@]}
	do
		debug External reference $FILE
		echo "${FILE#/}"
		# ls -l "$FILE"
		while [ -L "$FILE" ]
		do
			REFDIR=$(dirname "$FILE")
			NEWFILE=$(readlink "$FILE")
			NEWDIR=$( cd $(dirname "$FILE") ; pwd )
			FILE=${NEWDIR%/}/$(basename "$NEWFILE")
			debug "Link \"$FILE\" -> \"$NEWFILE\" -> \"$FILE\""
			echo "${FILE#/}"
			# ls -l "$FILE"
		done
	done > "$DIR_BUILD/mkhere-oslibs.txt"
}

# Report OS libraries from the build system that are needed for a package
type do_oslibs >/dev/null 2>/dev/null || \
do_oslibs () {
	if [ ! -r "$DIR_BUILD/mkhere-oslibs.txt" ]
	then
		do2_oslibs
	fi
	cat "$DIR_BUILD/mkhere-oslibs.txt"
}

# Construct a tar ball with os libs
#TODO# Maybe use this in a flavour, later on
do_oslibtar () {
	( cd / ; tar -cf - $(do_oslibs) )
}

# Construct a gzipped tar ball with os libs
do_oslibtgz () {
	do_oslibtar | gzip --best
}

# Construct a cpio archive with os libs (perhaps after cpioprefix)
do_oslibcpio () {
	( cd / ; do_oslibs | cpio -o -H newc --quiet ) | strip_cpio_trailer
	CPIO_APPEND_TRAILER=plain
}

# Construct a gzipped cpio archive with os libs (perhaps after cpioprefix)
do_oslibcpiogz () {
	do_oslibcpio | gzip --best
	CPIO_APPEND_TRAILER=gzip
}

# Refuse to install with an intermediate command
do_install () {
	echo -n >&2 'You can only use "install" as a last command'
	exit 1
}

# Generic touch of $DIR_SRC, which is version-specific to the source code
type do_touch >/dev/null 2>/dev/null || \
do_touch () {
	if [ ! -d "$DIR_SRC" ]
	then
		echo >&2 "You did not \"have\" source code for $TARGET not yet"
		exit 1
	fi
	touch "$DIR_SRC"
}

# Generic check if building is needed; includes test for source directory
type do_check >/dev/null 2>/dev/null || \
do_check () {
	[ -d "$DIR_SRC" ] && [ "$DIR_BUILD" -nt "$DIR_SRC" ]
}

# Define a do_build() if none defined yet
type do_build >/dev/null 2>/dev/null || \
do_build () {
	if do_check
	then
		echo 'Reusing build, as it postdates the source'
		RETVAL=0
	else
		rm -f "$DIR_BUILD/mkhere-oslibs.txt"
		do2_build
		RETVAL=$?
	fi
	# Mark the last successful build as the default build
	rm -f "${ALTCACHE}/tree/${TARGET}"
	if [ $RETVAL -eq 0 ]
	then
		ln -s $(basename "$DIR_TREE") $(dirname "$DIR_TREE")/"$TARGET"
	fi
	return $RETVAL
}


# Derive additional PATH info for various applications
#
# This uses the default builds, that is the last successful build,
# which indirectly incorporates the VERSION_pkg and FLAVOUR_pkg at
# the time of building.  See do_build() for the link assuring this.
# There is no support for mixing multiple versions of one package!
#
update_paths () {
	for DEPEND in $(do_dependencies)
	do
		# Runtime: PATH, LD_LIBRARY_PATH
		PATH="$PATH:${ALTCACHE}/tree/$DEPEND/usr/bin:${ALTCACHE}/tree/$DEPEND/usr/local/bin"
		LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}${ALTCACHE}/tree/$DEPEND/usr/lib:${ALTCACHE}/tree/$DEPEND/usr/local/lib"
		# GCC: CPATH, LIBRARY_PATH, see https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html
		export CPATH="${CPATH:+$CPATH:}${ALTCACHE}/tree/$DEPEND/usr/include:${ALTCACHE}/tree/$DEPEND/usr/local/include"
		export LIBRARY_PATH="${LIBRARY_PATH:+$LIBRARY_PATH:}${ALTCACHE}/tree/$DEPEND/usr/lib:${ALTCACHE}/tree/$DEPEND/usr/local/lib"
		# CMake: CMAKE_SYSTEM_PREFIX_PATH
		CMAKE_SYSTEM_PREFIX_PATH="${CMAKE_SYSTEM_PREFIX_PATH:+$CMAKE_SYSTEM_PREFIX_PATH\;}${ALTCACHE}/tree/$DEPEND/usr\;${ALTCACHE}/tree/$DEPEND/usr/local"
	done
}


# Main programming, running the commands in argv[]
main_do_commands () {
	derive_DIR
	update_paths
	if [ "$#" -eq 0 ]
	then
		echo >&2 "Please supply one or more subcommands to $0"
		exit 1
	fi
	CPIO_APPEND_TRAILER=none
	for TODO in "$@"
	do
		"do_$TODO"
		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]
		then
			echo >&2 "$TARGET $TODO failed with exit code $EXITCODE"
			do_touch
			exit 1
		fi
	done
	write_cpio_trailer $CPIO_APPEND_TRAILER
	debug "Success from subcommands $@"
}
